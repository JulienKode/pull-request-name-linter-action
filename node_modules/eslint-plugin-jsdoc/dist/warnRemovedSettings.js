"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = warnRemovedSettings;

var _WarnSettings = _interopRequireDefault(require("./WarnSettings"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

const warnSettings = (0, _WarnSettings.default)();
/**
 * @typedef {(
 *     "require-jsdoc"
 *   | "require-returns"
 *   | "valid-types"
 *   | "require-example"
 *   | "check-examples"
 * )} RulesWithMovedSettings
 */

/**
 * @param {object} obj
 * @param {string} property
 * @returns {boolean}
 */

const has = (obj, property) => {
  return Object.prototype.hasOwnProperty.call(obj, property);
};
/**
 *
 * @param {RulesWithMovedSettings} ruleName
 * @returns {string[]}
 */


const getMovedSettings = ruleName => {
  switch (ruleName) {
    case 'require-jsdoc':
      return ['exemptEmptyFunctions'];

    case 'require-returns':
      return ['forceRequireReturn'];

    case 'valid-types':
      return ['allowEmptyNamepaths', 'checkSeesForNamepaths'];

    case 'require-example':
      return ['avoidExampleOnConstructors'];

    case 'check-examples':
      return ['captionRequired', 'exampleCodeRegex', 'rejectExampleCodeRegex', 'allowInlineConfig', 'noDefaultExampleRules', 'matchingFileName', 'configFile', // The old name for `checkEslintrc`
      'eslintrcForExamples', 'baseConfig', 'reportUnusedDisableDirectives'];
  }
  /* istanbul ignore next */


  return [];
};
/**
 * @param {object} context
 * @param {RulesWithMovedSettings} ruleName
 */


function warnRemovedSettings(context, ruleName) {
  const movedSettings = getMovedSettings(ruleName);

  if (!context.settings || !context.settings.jsdoc) {
    return;
  }

  var _iterator = _createForOfIteratorHelper(movedSettings),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      const setting = _step.value;

      if (has(context.settings.jsdoc, setting) && !warnSettings.hasBeenWarned(context, setting)) {
        context.report({
          loc: {
            start: {
              column: 1,
              line: 1
            }
          },
          message: `\`settings.jsdoc.${setting}\` has been removed, ` + `use options in the rule \`${ruleName}\` instead.`
        });
        warnSettings.markSettingAsWarned(context, setting);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}

module.exports = exports.default;
//# sourceMappingURL=warnRemovedSettings.js.map